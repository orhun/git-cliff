name: Continuous Integration

on:
  pull_request:
  push:
    branches:
      - main
      - staging # for bors
      - trying # for bors
  schedule:
    - cron: "0 0 * * 0"

jobs:
  check:
    name: Check
    runs-on: ubuntu-22.04
    steps:
      - name: Install toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Checkout
        uses: actions/checkout@v4
      - name: Check
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --locked --verbose
      - name: Check without default features
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --locked --no-default-features --verbose

  typos:
    name: Typos
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Check typos
        uses: crate-ci/typos@master

  semver:
    name: Semver
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Check semver
        uses: obi1kenobi/cargo-semver-checks-action@v2
        with:
          package: git-cliff-core

  test:
    name: Test suite
    runs-on: ubuntu-22.04
    steps:
      - name: Install toolchain
        uses: dtolnay/rust-toolchain@nightly
      - name: Checkout
        if: github.event_name != 'pull_request'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Checkout
        if: github.event_name == 'pull_request'
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
      - name: Setup cargo-tarpaulin
        uses: taiki-e/install-action@cargo-tarpaulin
      - name: Run tests
        run: |
          cargo test --no-default-features \
            -- --skip "repo::test::git_upstream_remote"
      - name: Run tests
        run: |
          cargo tarpaulin --out xml --verbose --all-features \
            -- --skip "repo::test::git_upstream_remote"
      - name: Upload reports to codecov
        uses: codecov/codecov-action@v4
        with:
          name: code-coverage-report
          file: cobertura.xml
          flags: unit-tests
          fail_ci_if_error: true
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}

  clippy:
    name: Lints
    runs-on: ubuntu-22.04
    steps:
      - name: Install toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: clippy
      - name: Checkout
        uses: actions/checkout@v4
      - name: Check the lints
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --tests --verbose -- -D warnings

  rustfmt:
    name: Formatting
    runs-on: ubuntu-22.04
    steps:
      - name: Install toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt
      - name: Checkout
        uses: actions/checkout@v4
      - name: Check the formatting
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check --verbose

  lychee:
    name: Links
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Check the links
        uses: lycheeverse/lychee-action@v1
        with:
          args: -v --max-concurrency 1 *.md website/docs/* website/blog/*
          fail: true
          token: ${{ secrets.GITHUB_TOKEN }}

  audit:
    name: Audit check
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Run cargo-audit
        uses: actions-rs/audit-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  msrv:
    name: Check Rust version
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install cargo-binstall
        uses: taiki-e/install-action@cargo-binstall
      - name: Install cargo-msrv
        run: cargo binstall -y cargo-msrv
      - name: Run cargo-msrv
        shell: bash
        run: |
          for package in "git-cliff" "git-cliff-core"; do
            printf "Checking MSRV for $package..."
            cargo msrv --output-format json --path "$package" verify | tail -n 1 | jq --exit-status '.success'
          done

  wheels:
    name: Test that python wheels build and install
    runs-on: ${{ matrix.build.os }}
    strategy:
      fail-fast: false
      matrix:
        build:
          - {
              NAME: linux-x64-glibc,
              OS: ubuntu-22.04,
              TOOLCHAIN: stable,
              TARGET: x86_64-unknown-linux-gnu,
            }
          - {
              NAME: linux-x64-musl,
              OS: ubuntu-22.04,
              TOOLCHAIN: stable,
              TARGET: x86_64-unknown-linux-musl,
            }
          - {
              NAME: linux-x86-musl,
              OS: ubuntu-22.04,
              TOOLCHAIN: stable,
              TARGET: i686-unknown-linux-musl,
            }
          - {
              NAME: linux-arm64-glibc,
              OS: ubuntu-22.04,
              TOOLCHAIN: stable,
              TARGET: aarch64-unknown-linux-gnu,
            }
          - {
              NAME: linux-arm64-musl,
              OS: ubuntu-22.04,
              TOOLCHAIN: stable,
              TARGET: aarch64-unknown-linux-musl,
            }
          - {
              NAME: win32-x64-mingw,
              OS: windows-2022,
              TOOLCHAIN: stable,
              TARGET: x86_64-pc-windows-gnu,
            }
          - {
              NAME: win32-x64-msvc,
              OS: windows-2022,
              TOOLCHAIN: stable,
              TARGET: x86_64-pc-windows-msvc,
            }
          - {
              NAME: win32-x86-msvc,
              OS: windows-2022,
              TOOLCHAIN: stable,
              TARGET: i686-pc-windows-msvc,
            }
          - {
              NAME: darwin-x64,
              OS: macos-12,
              TOOLCHAIN: stable,
              TARGET: x86_64-apple-darwin,
            }
          - {
              NAME: darwin-arm64,
              OS: macos-12,
              TOOLCHAIN: stable,
              TARGET: aarch64-apple-darwin,
            }
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install dependencies
        shell: bash
        run: |
          if [[ "${{ matrix.build.NAME }}" = *"-musl" ]]; then
            sudo apt-get update
            sudo apt-get install -y --no-install-recommends \
              --allow-unauthenticated musl-tools
          fi
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.build.TOOLCHAIN }}
          target: ${{ matrix.build.TARGET }}
          override: true
      - name: Build Python wheels (linux)
        if: startsWith(matrix.build.NAME, 'linux')
        uses: PyO3/maturin-action@v1
        with:
          working-directory: pypi
          target: ${{ matrix.build.TARGET }}
          args: --release --sdist --out wheels
          sccache: "true"
          # https://github.com/PyO3/maturin-action/issues/245
          manylinux: ${{ matrix.build.TARGET == 'aarch64-unknown-linux-gnu' && '2_28' || 'auto' }}
      - name: Build Python wheels (macos & windows)
        if: (startsWith(matrix.build.OS, 'macos') || startsWith(matrix.build.OS, 'windows'))
        uses: PyO3/maturin-action@v1
        with:
          working-directory: pypi
          target: ${{ matrix.build.TARGET }}
          args: --release --sdist --out wheels
          sccache: "true"
      - name: Build Python wheels (musl)
        if: endsWith(matrix.build.OS, 'musl')
        uses: PyO3/maturin-action@v1
        with:
          working-directory: pypi
          target: ${{ matrix.build.TARGET }}
          args: --release --sdist --out wheels
          sccache: "true"
          manylinux: musllinux_1_2
      - name: Test wheel installation
        run: |
          pip install --no-index --find-links=pypi/wheels git-cliff
          git-cliff --version
