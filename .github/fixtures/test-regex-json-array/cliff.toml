# git-cliff ~ configuration file
# https://git-cliff.org/docs/configuration

[remote.github]
owner = "orhun"
repo = "git-cliff-readme-example-one-pr-one-commit"

[changelog]
# A Tera template to be rendered for each release in the changelog.
# See https://keats.github.io/tera/docs/#introduction
body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | upper_first }}
    {% for commit in commits %}
        - {{ commit.message | split(pat="\n") | nth(n=0) | trim_end }} \
        {%- if commit.remote.pr_number -%}
            ([PR #{{ commit.remote.pr_number }}](https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}/pull/{{ commit.remote.pr_number }}))\
        {%- endif -%}
    {% endfor %}
{% endfor %}\n
"""

[git]
# Parse commits according to the conventional commits specification.
# See https://www.conventionalcommits.org
conventional_commits = false
# An array of regex based parsers for extracting data from the commit message.
# Assigns commits to groups.
# Optionally sets the commit's `scope` and can decide to exclude commits from further processing.
commit_parsers = [
    { field = "remote.pr_labels", pattern = "area/documentation", group = "<!-- 05 -->📝 Documentation" },
    { field = "remote.pr_labels", pattern = "breaking change", group = "<!-- 00 -->💥 Breaking Changes" },
    { field = "remote.pr_labels", pattern = "type/bug", group = "<!-- 03 -->🐛 Bug Fixes" },
    { field = "remote.pr_labels", pattern = "type/enhancement", group = "<!-- 02 -->✨ Enhancements" },
    { field = "remote.pr_labels", pattern = "type/refactor", group = "<!-- 04 -->🧹 Refactoring" },
    { field = "remote.pr_labels", pattern = "type/update", group = "<!-- 01 -->🚀 Feature Updates" },
    { message = ".*", group = "<!-- 06 -->🌀 Miscellaneous" },
]
